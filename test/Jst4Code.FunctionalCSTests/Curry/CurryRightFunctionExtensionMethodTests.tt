<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
int funcVariations = 15;
#>
using Jst4Code.FunctionalCS;
using System;
using System.Linq;
using NUnit.Framework;

namespace Jst4Code.FunctionalCSTests.Curry
{
	public class CurryRightFunctionExtensionMethodTests
	{<# 
	for(int i = 2; i<funcVariations + 2; i++) { 
	Func<string, string, string> formatText = (separater, prifix) =>  string.Join(separater, Enumerable.Range(1, i).Select(k => string.Format(prifix,k))); 
	string variableInitialization = formatText(", ", "value{0} = {0}");
	string inputForNonCurryFunction = formatText(", ", "value{0}");
	string curriedMethodCalls = string.Join("", Enumerable.Range(1, i).Reverse().Select(k => string.Format("(value{0})",k)));
	string curriedMethodCallsInReverse = formatText("", "(value{0})");
	string inputCollection = formatText(", ", "in{0}");
	string arrayDeclarationTypes = formatText(", ", "int");
	#>

        [Test]
        public void Curry<#=i#>Params_Should_Match()
        {
            // Arrange
            int <#=variableInitialization#>;

            Func<<#=arrayDeclarationTypes#>, int[]> createArray = (<#=inputCollection#>) => new int[] { <#=inputCollection#> };
            var expected = createArray(<#=inputForNonCurryFunction#>);

            // Act
            var arrayFromCurry = createArray.CurryRight();
            var fromCurriedFunction = arrayFromCurry<#=curriedMethodCalls#>;

            // Assert
            Assert.AreEqual(expected, fromCurriedFunction);
        }

        [Test]
        public void Curry<#=i#>Params_Should_Not_Match_When_Sequence_Changed()
        {
            // Arrange
            int <#=variableInitialization#>;

            Func<<#=arrayDeclarationTypes#>, int[]> createArray = (<#=inputCollection#>) => new int[] { <#=inputCollection#> };
            var expected = createArray(<#=inputForNonCurryFunction#>);

            // Act
            var arrayFromCurry = createArray.CurryRight();
            var fromCurriedFunction = arrayFromCurry<#=curriedMethodCallsInReverse#>;

            // Assert
            Assert.AreNotEqual(expected, fromCurriedFunction);
            Assert.AreEqual(expected, fromCurriedFunction.Reverse());
        }
	<# } #>}
}