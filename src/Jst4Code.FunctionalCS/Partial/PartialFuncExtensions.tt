<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
string namespaceToUse = "Jst4Code.FunctionalCS";
string staticClassName = "PartialFuncExtensions";
int funcVariations = 15;
#>
using System;

namespace <#= namespaceToUse #>
{
	public static class <#= staticClassName #>
	{<# 
	for(int i = 2; i<funcVariations + 2; i++) { 
	Func<string, string, string> formatText = (separater, prifix) =>  string.Join(separater, Enumerable.Range(1, i).Select(k => $"{prifix}{k}")); 
	string functionInput = formatText(", ", "value");#>

		#region Partial<<#= formatText(", ", "T") #>, TResult>
		<#
		for(int j = 1; j<i; j++) { 
		string partialFunctionInput = string.Join(", ", Enumerable.Range(1, i-j).Select(k => string.Format("T{0} value{0}", k)));
		string partialMethodInputs = string.Join(", ", Enumerable.Range(1, i).Skip(i-j).Select(k => string.Format("value{0}", k)));
		string resultGenericTypes = string.Join(", ", Enumerable.Range(1, i).Skip(i-j).Select(k => string.Format("T{0}", k)));
		#>

        public static Func<<#= resultGenericTypes #>, TResult> Partial<<#= formatText(", ", "T") #>, TResult>(
            this Func<<#= formatText(", ", "T") #>, TResult> function, <#= partialFunctionInput #>) =>
                (<#= partialMethodInputs #>) => function(<#= functionInput #>);
		<# } #>

		#endregion
		<# } #>

	}
}